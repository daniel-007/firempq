// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: server/sqsproto/sqsmsg/sqspayload.proto

/*
	Package sqsmsg is a generated protocol buffer package.

	It is generated from these files:
		server/sqsproto/sqsmsg/sqspayload.proto

	It has these top-level messages:
		UserAttribute
		SQSMessagePayload
*/
package sqsmsg

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import strings "strings"
import reflect "reflect"
import sortkeys "github.com/gogo/protobuf/sortkeys"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type UserAttribute struct {
	Type  string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *UserAttribute) Reset()                    { *m = UserAttribute{} }
func (*UserAttribute) ProtoMessage()               {}
func (*UserAttribute) Descriptor() ([]byte, []int) { return fileDescriptorSqspayload, []int{0} }

func (m *UserAttribute) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *UserAttribute) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type SQSMessagePayload struct {
	Payload                string                    `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
	MD5OfMessageBody       string                    `protobuf:"bytes,2,opt,name=MD5_of_message_body,json=MD5OfMessageBody,proto3" json:"MD5_of_message_body,omitempty"`
	MD5OfMessageAttributes string                    `protobuf:"bytes,3,opt,name=MD5_of_message_attributes,json=MD5OfMessageAttributes,proto3" json:"MD5_of_message_attributes,omitempty"`
	SenderId               string                    `protobuf:"bytes,4,opt,name=sender_id,json=senderId,proto3" json:"sender_id,omitempty"`
	SentTimestamp          string                    `protobuf:"bytes,5,opt,name=sent_timestamp,json=sentTimestamp,proto3" json:"sent_timestamp,omitempty"`
	UserAttributes         map[string]*UserAttribute `protobuf:"bytes,6,rep,name=user_attributes,json=userAttributes" json:"user_attributes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *SQSMessagePayload) Reset()                    { *m = SQSMessagePayload{} }
func (*SQSMessagePayload) ProtoMessage()               {}
func (*SQSMessagePayload) Descriptor() ([]byte, []int) { return fileDescriptorSqspayload, []int{1} }

func (m *SQSMessagePayload) GetPayload() string {
	if m != nil {
		return m.Payload
	}
	return ""
}

func (m *SQSMessagePayload) GetMD5OfMessageBody() string {
	if m != nil {
		return m.MD5OfMessageBody
	}
	return ""
}

func (m *SQSMessagePayload) GetMD5OfMessageAttributes() string {
	if m != nil {
		return m.MD5OfMessageAttributes
	}
	return ""
}

func (m *SQSMessagePayload) GetSenderId() string {
	if m != nil {
		return m.SenderId
	}
	return ""
}

func (m *SQSMessagePayload) GetSentTimestamp() string {
	if m != nil {
		return m.SentTimestamp
	}
	return ""
}

func (m *SQSMessagePayload) GetUserAttributes() map[string]*UserAttribute {
	if m != nil {
		return m.UserAttributes
	}
	return nil
}

func init() {
	proto.RegisterType((*UserAttribute)(nil), "sqsmsg.UserAttribute")
	proto.RegisterType((*SQSMessagePayload)(nil), "sqsmsg.SQSMessagePayload")
}
func (this *UserAttribute) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UserAttribute)
	if !ok {
		that2, ok := that.(UserAttribute)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if this.Value != that1.Value {
		return false
	}
	return true
}
func (this *SQSMessagePayload) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SQSMessagePayload)
	if !ok {
		that2, ok := that.(SQSMessagePayload)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Payload != that1.Payload {
		return false
	}
	if this.MD5OfMessageBody != that1.MD5OfMessageBody {
		return false
	}
	if this.MD5OfMessageAttributes != that1.MD5OfMessageAttributes {
		return false
	}
	if this.SenderId != that1.SenderId {
		return false
	}
	if this.SentTimestamp != that1.SentTimestamp {
		return false
	}
	if len(this.UserAttributes) != len(that1.UserAttributes) {
		return false
	}
	for i := range this.UserAttributes {
		if !this.UserAttributes[i].Equal(that1.UserAttributes[i]) {
			return false
		}
	}
	return true
}
func (this *UserAttribute) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&sqsmsg.UserAttribute{")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SQSMessagePayload) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&sqsmsg.SQSMessagePayload{")
	s = append(s, "Payload: "+fmt.Sprintf("%#v", this.Payload)+",\n")
	s = append(s, "MD5OfMessageBody: "+fmt.Sprintf("%#v", this.MD5OfMessageBody)+",\n")
	s = append(s, "MD5OfMessageAttributes: "+fmt.Sprintf("%#v", this.MD5OfMessageAttributes)+",\n")
	s = append(s, "SenderId: "+fmt.Sprintf("%#v", this.SenderId)+",\n")
	s = append(s, "SentTimestamp: "+fmt.Sprintf("%#v", this.SentTimestamp)+",\n")
	keysForUserAttributes := make([]string, 0, len(this.UserAttributes))
	for k, _ := range this.UserAttributes {
		keysForUserAttributes = append(keysForUserAttributes, k)
	}
	sortkeys.Strings(keysForUserAttributes)
	mapStringForUserAttributes := "map[string]*UserAttribute{"
	for _, k := range keysForUserAttributes {
		mapStringForUserAttributes += fmt.Sprintf("%#v: %#v,", k, this.UserAttributes[k])
	}
	mapStringForUserAttributes += "}"
	if this.UserAttributes != nil {
		s = append(s, "UserAttributes: "+mapStringForUserAttributes+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringSqspayload(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *UserAttribute) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserAttribute) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Type) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSqspayload(dAtA, i, uint64(len(m.Type)))
		i += copy(dAtA[i:], m.Type)
	}
	if len(m.Value) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSqspayload(dAtA, i, uint64(len(m.Value)))
		i += copy(dAtA[i:], m.Value)
	}
	return i, nil
}

func (m *SQSMessagePayload) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SQSMessagePayload) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Payload) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSqspayload(dAtA, i, uint64(len(m.Payload)))
		i += copy(dAtA[i:], m.Payload)
	}
	if len(m.MD5OfMessageBody) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSqspayload(dAtA, i, uint64(len(m.MD5OfMessageBody)))
		i += copy(dAtA[i:], m.MD5OfMessageBody)
	}
	if len(m.MD5OfMessageAttributes) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSqspayload(dAtA, i, uint64(len(m.MD5OfMessageAttributes)))
		i += copy(dAtA[i:], m.MD5OfMessageAttributes)
	}
	if len(m.SenderId) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintSqspayload(dAtA, i, uint64(len(m.SenderId)))
		i += copy(dAtA[i:], m.SenderId)
	}
	if len(m.SentTimestamp) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintSqspayload(dAtA, i, uint64(len(m.SentTimestamp)))
		i += copy(dAtA[i:], m.SentTimestamp)
	}
	if len(m.UserAttributes) > 0 {
		for k, _ := range m.UserAttributes {
			dAtA[i] = 0x32
			i++
			v := m.UserAttributes[k]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovSqspayload(uint64(msgSize))
			}
			mapSize := 1 + len(k) + sovSqspayload(uint64(len(k))) + msgSize
			i = encodeVarintSqspayload(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintSqspayload(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintSqspayload(dAtA, i, uint64(v.Size()))
				n1, err := v.MarshalTo(dAtA[i:])
				if err != nil {
					return 0, err
				}
				i += n1
			}
		}
	}
	return i, nil
}

func encodeVarintSqspayload(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *UserAttribute) Size() (n int) {
	var l int
	_ = l
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovSqspayload(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovSqspayload(uint64(l))
	}
	return n
}

func (m *SQSMessagePayload) Size() (n int) {
	var l int
	_ = l
	l = len(m.Payload)
	if l > 0 {
		n += 1 + l + sovSqspayload(uint64(l))
	}
	l = len(m.MD5OfMessageBody)
	if l > 0 {
		n += 1 + l + sovSqspayload(uint64(l))
	}
	l = len(m.MD5OfMessageAttributes)
	if l > 0 {
		n += 1 + l + sovSqspayload(uint64(l))
	}
	l = len(m.SenderId)
	if l > 0 {
		n += 1 + l + sovSqspayload(uint64(l))
	}
	l = len(m.SentTimestamp)
	if l > 0 {
		n += 1 + l + sovSqspayload(uint64(l))
	}
	if len(m.UserAttributes) > 0 {
		for k, v := range m.UserAttributes {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovSqspayload(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovSqspayload(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovSqspayload(uint64(mapEntrySize))
		}
	}
	return n
}

func sovSqspayload(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozSqspayload(x uint64) (n int) {
	return sovSqspayload(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *UserAttribute) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UserAttribute{`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SQSMessagePayload) String() string {
	if this == nil {
		return "nil"
	}
	keysForUserAttributes := make([]string, 0, len(this.UserAttributes))
	for k, _ := range this.UserAttributes {
		keysForUserAttributes = append(keysForUserAttributes, k)
	}
	sortkeys.Strings(keysForUserAttributes)
	mapStringForUserAttributes := "map[string]*UserAttribute{"
	for _, k := range keysForUserAttributes {
		mapStringForUserAttributes += fmt.Sprintf("%v: %v,", k, this.UserAttributes[k])
	}
	mapStringForUserAttributes += "}"
	s := strings.Join([]string{`&SQSMessagePayload{`,
		`Payload:` + fmt.Sprintf("%v", this.Payload) + `,`,
		`MD5OfMessageBody:` + fmt.Sprintf("%v", this.MD5OfMessageBody) + `,`,
		`MD5OfMessageAttributes:` + fmt.Sprintf("%v", this.MD5OfMessageAttributes) + `,`,
		`SenderId:` + fmt.Sprintf("%v", this.SenderId) + `,`,
		`SentTimestamp:` + fmt.Sprintf("%v", this.SentTimestamp) + `,`,
		`UserAttributes:` + mapStringForUserAttributes + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringSqspayload(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *UserAttribute) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSqspayload
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserAttribute: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserAttribute: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSqspayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSqspayload
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSqspayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSqspayload
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSqspayload(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSqspayload
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SQSMessagePayload) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSqspayload
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SQSMessagePayload: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SQSMessagePayload: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSqspayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSqspayload
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MD5OfMessageBody", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSqspayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSqspayload
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MD5OfMessageBody = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MD5OfMessageAttributes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSqspayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSqspayload
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MD5OfMessageAttributes = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenderId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSqspayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSqspayload
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SenderId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SentTimestamp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSqspayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSqspayload
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SentTimestamp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserAttributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSqspayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSqspayload
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UserAttributes == nil {
				m.UserAttributes = make(map[string]*UserAttribute)
			}
			var mapkey string
			var mapvalue *UserAttribute
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSqspayload
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSqspayload
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthSqspayload
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSqspayload
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthSqspayload
					}
					postmsgIndex := iNdEx + mapmsglen
					if mapmsglen < 0 {
						return ErrInvalidLengthSqspayload
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &UserAttribute{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipSqspayload(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthSqspayload
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.UserAttributes[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSqspayload(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSqspayload
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSqspayload(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSqspayload
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSqspayload
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSqspayload
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthSqspayload
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowSqspayload
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipSqspayload(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthSqspayload = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSqspayload   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("server/sqsproto/sqsmsg/sqspayload.proto", fileDescriptorSqspayload) }

var fileDescriptorSqspayload = []byte{
	// 366 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x52, 0x41, 0x4b, 0x02, 0x41,
	0x14, 0xde, 0x71, 0xd5, 0x72, 0x44, 0xb3, 0xb1, 0x62, 0x2b, 0x18, 0x44, 0x88, 0x84, 0x72, 0x03,
	0x43, 0xc8, 0x6e, 0x89, 0x1d, 0x3a, 0x48, 0xa5, 0x15, 0xdd, 0x96, 0x95, 0x1d, 0x45, 0x72, 0x5d,
	0x9b, 0x37, 0x2b, 0xec, 0xad, 0x3f, 0x10, 0xf4, 0x33, 0xfa, 0x29, 0x1d, 0x3d, 0x76, 0xcc, 0xed,
	0xd2, 0xd1, 0x9f, 0x10, 0xce, 0xee, 0x86, 0x56, 0xb7, 0xf7, 0xbe, 0xf9, 0xbe, 0xef, 0xcd, 0xfb,
	0x66, 0xf0, 0x3e, 0x30, 0x3e, 0x66, 0xfc, 0x08, 0x1e, 0x61, 0xc4, 0x1d, 0xe1, 0xcc, 0x0b, 0x1b,
	0x7a, 0xb2, 0x37, 0xbd, 0x81, 0x63, 0x5a, 0xba, 0xc4, 0x49, 0x32, 0x38, 0x28, 0xd6, 0x70, 0xe6,
	0x16, 0x18, 0x3f, 0x13, 0x82, 0xf7, 0x3b, 0xae, 0x60, 0x84, 0xe0, 0xb8, 0xf0, 0x46, 0x4c, 0x43,
	0x05, 0x54, 0x4a, 0xb5, 0x64, 0x4d, 0x36, 0x70, 0x62, 0x6c, 0x0e, 0x5c, 0xa6, 0xc5, 0x24, 0x18,
	0x34, 0xc5, 0x67, 0x15, 0xaf, 0xb7, 0xaf, 0xdb, 0x4d, 0x06, 0x60, 0xf6, 0xd8, 0x55, 0x60, 0x4f,
	0x34, 0xbc, 0x12, 0x4e, 0x0a, 0x2d, 0xa2, 0x96, 0x94, 0x71, 0xbe, 0xd9, 0xa8, 0x1a, 0x4e, 0xd7,
	0xb0, 0x03, 0x89, 0xd1, 0x71, 0x2c, 0x2f, 0xf4, 0xcc, 0x35, 0x1b, 0xd5, 0xcb, 0x6e, 0xe8, 0x55,
	0x77, 0x2c, 0x8f, 0xd4, 0xf0, 0xf6, 0x2f, 0xba, 0x19, 0x5d, 0x12, 0x34, 0x55, 0x8a, 0xb6, 0x16,
	0x45, 0x3f, 0x2b, 0x00, 0xd9, 0xc5, 0x29, 0x60, 0x43, 0x8b, 0x71, 0xa3, 0x6f, 0x69, 0x71, 0x49,
	0x5d, 0x0d, 0x80, 0x0b, 0x8b, 0xec, 0xe1, 0x2c, 0xb0, 0xa1, 0x30, 0x44, 0xdf, 0x66, 0x20, 0x4c,
	0x7b, 0xa4, 0x25, 0x24, 0x23, 0x33, 0x47, 0x6f, 0x22, 0x90, 0xdc, 0xe1, 0x35, 0x17, 0x18, 0x5f,
	0x1c, 0x9a, 0x2c, 0xa8, 0xa5, 0x74, 0xa5, 0xac, 0x07, 0xd1, 0xe9, 0x7f, 0x76, 0xd7, 0x97, 0x92,
	0x84, 0xf3, 0xa1, 0xe0, 0x5e, 0x2b, 0xeb, 0x2e, 0x81, 0x3b, 0xf7, 0x38, 0xff, 0x0f, 0x8d, 0xe4,
	0xb0, 0xfa, 0xc0, 0xbc, 0x30, 0xb2, 0x79, 0x49, 0x0e, 0x16, 0x43, 0x4f, 0x57, 0x36, 0xa3, 0xb1,
	0x4b, 0xea, 0xf0, 0x2d, 0x4e, 0x63, 0x27, 0xa8, 0x7e, 0x38, 0x99, 0x52, 0xe5, 0x7d, 0x4a, 0x95,
	0xd9, 0x94, 0xa2, 0x27, 0x9f, 0xa2, 0x57, 0x9f, 0xa2, 0x37, 0x9f, 0xa2, 0x89, 0x4f, 0xd1, 0x87,
	0x4f, 0xd1, 0x97, 0x4f, 0x95, 0x99, 0x4f, 0xd1, 0xcb, 0x27, 0x55, 0x3a, 0x49, 0xf9, 0x0f, 0x8e,
	0xbf, 0x03, 0x00, 0x00, 0xff, 0xff, 0xe0, 0x81, 0xd8, 0x14, 0x32, 0x02, 0x00, 0x00,
}
