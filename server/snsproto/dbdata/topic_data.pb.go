// Code generated by protoc-gen-gogo.
// source: server/snsproto/dbdata/topic_data.proto
// DO NOT EDIT!

/*
	Package dbdata is a generated protocol buffer package.

	It is generated from these files:
		server/snsproto/dbdata/topic_data.proto

	It has these top-level messages:
		Subscription
		Topic
		TopicNames
*/
package dbdata

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import strings "strings"
import github_com_gogo_protobuf_proto "github.com/gogo/protobuf/proto"
import sort "sort"
import strconv "strconv"
import reflect "reflect"
import github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"

import errors "errors"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.GoGoProtoPackageIsVersion1

type Subscription struct {
	Arn         string `protobuf:"bytes,1,opt,name=arn,proto3" json:"arn,omitempty"`
	Owner       string `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner,omitempty"`
	Endpoint    string `protobuf:"bytes,3,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	Protocol    string `protobuf:"bytes,4,opt,name=protocol,proto3" json:"protocol,omitempty"`
	RawDelivery bool   `protobuf:"varint,5,opt,name=raw_delivery,json=rawDelivery,proto3" json:"raw_delivery,omitempty"`
	Pending     bool   `protobuf:"varint,6,opt,name=pending,proto3" json:"pending,omitempty"`
}

func (m *Subscription) Reset()                    { *m = Subscription{} }
func (*Subscription) ProtoMessage()               {}
func (*Subscription) Descriptor() ([]byte, []int) { return fileDescriptorTopicData, []int{0} }

type Topic struct {
	Arn                     string                   `protobuf:"bytes,1,opt,name=arn,proto3" json:"arn,omitempty"`
	Name                    string                   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	DisplayName             string                   `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	Policy                  string                   `protobuf:"bytes,4,opt,name=policy,proto3" json:"policy,omitempty"`
	DeliveryPolicy          string                   `protobuf:"bytes,5,opt,name=delivery_policy,json=deliveryPolicy,proto3" json:"delivery_policy,omitempty"`
	EffectiveDeliveryPolicy string                   `protobuf:"bytes,6,opt,name=effective_delivery_policy,json=effectiveDeliveryPolicy,proto3" json:"effective_delivery_policy,omitempty"`
	DeletedSubscriptions    int64                    `protobuf:"varint,7,opt,name=deleted_subscriptions,json=deletedSubscriptions,proto3" json:"deleted_subscriptions,omitempty"`
	SqsSubscriptions        map[string]*Subscription `protobuf:"bytes,8,rep,name=sqs_subscriptions,json=sqsSubscriptions" json:"sqs_subscriptions,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
	OtherSubscriptions      map[string]*Subscription `protobuf:"bytes,9,rep,name=other_subscriptions,json=otherSubscriptions" json:"other_subscriptions,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *Topic) Reset()                    { *m = Topic{} }
func (*Topic) ProtoMessage()               {}
func (*Topic) Descriptor() ([]byte, []int) { return fileDescriptorTopicData, []int{1} }

func (m *Topic) GetSqsSubscriptions() map[string]*Subscription {
	if m != nil {
		return m.SqsSubscriptions
	}
	return nil
}

func (m *Topic) GetOtherSubscriptions() map[string]*Subscription {
	if m != nil {
		return m.OtherSubscriptions
	}
	return nil
}

type TopicNames struct {
	Topics []string `protobuf:"bytes,1,rep,name=topics" json:"topics,omitempty"`
}

func (m *TopicNames) Reset()                    { *m = TopicNames{} }
func (*TopicNames) ProtoMessage()               {}
func (*TopicNames) Descriptor() ([]byte, []int) { return fileDescriptorTopicData, []int{2} }

func init() {
	proto.RegisterType((*Subscription)(nil), "dbdata.Subscription")
	proto.RegisterType((*Topic)(nil), "dbdata.Topic")
	proto.RegisterType((*TopicNames)(nil), "dbdata.TopicNames")
}
func (this *Subscription) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Subscription)
	if !ok {
		that2, ok := that.(Subscription)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Arn != that1.Arn {
		return false
	}
	if this.Owner != that1.Owner {
		return false
	}
	if this.Endpoint != that1.Endpoint {
		return false
	}
	if this.Protocol != that1.Protocol {
		return false
	}
	if this.RawDelivery != that1.RawDelivery {
		return false
	}
	if this.Pending != that1.Pending {
		return false
	}
	return true
}
func (this *Topic) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Topic)
	if !ok {
		that2, ok := that.(Topic)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Arn != that1.Arn {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.DisplayName != that1.DisplayName {
		return false
	}
	if this.Policy != that1.Policy {
		return false
	}
	if this.DeliveryPolicy != that1.DeliveryPolicy {
		return false
	}
	if this.EffectiveDeliveryPolicy != that1.EffectiveDeliveryPolicy {
		return false
	}
	if this.DeletedSubscriptions != that1.DeletedSubscriptions {
		return false
	}
	if len(this.SqsSubscriptions) != len(that1.SqsSubscriptions) {
		return false
	}
	for i := range this.SqsSubscriptions {
		if !this.SqsSubscriptions[i].Equal(that1.SqsSubscriptions[i]) {
			return false
		}
	}
	if len(this.OtherSubscriptions) != len(that1.OtherSubscriptions) {
		return false
	}
	for i := range this.OtherSubscriptions {
		if !this.OtherSubscriptions[i].Equal(that1.OtherSubscriptions[i]) {
			return false
		}
	}
	return true
}
func (this *TopicNames) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*TopicNames)
	if !ok {
		that2, ok := that.(TopicNames)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.Topics) != len(that1.Topics) {
		return false
	}
	for i := range this.Topics {
		if this.Topics[i] != that1.Topics[i] {
			return false
		}
	}
	return true
}
func (this *Subscription) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&dbdata.Subscription{")
	s = append(s, "Arn: "+fmt.Sprintf("%#v", this.Arn)+",\n")
	s = append(s, "Owner: "+fmt.Sprintf("%#v", this.Owner)+",\n")
	s = append(s, "Endpoint: "+fmt.Sprintf("%#v", this.Endpoint)+",\n")
	s = append(s, "Protocol: "+fmt.Sprintf("%#v", this.Protocol)+",\n")
	s = append(s, "RawDelivery: "+fmt.Sprintf("%#v", this.RawDelivery)+",\n")
	s = append(s, "Pending: "+fmt.Sprintf("%#v", this.Pending)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Topic) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 13)
	s = append(s, "&dbdata.Topic{")
	s = append(s, "Arn: "+fmt.Sprintf("%#v", this.Arn)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "DisplayName: "+fmt.Sprintf("%#v", this.DisplayName)+",\n")
	s = append(s, "Policy: "+fmt.Sprintf("%#v", this.Policy)+",\n")
	s = append(s, "DeliveryPolicy: "+fmt.Sprintf("%#v", this.DeliveryPolicy)+",\n")
	s = append(s, "EffectiveDeliveryPolicy: "+fmt.Sprintf("%#v", this.EffectiveDeliveryPolicy)+",\n")
	s = append(s, "DeletedSubscriptions: "+fmt.Sprintf("%#v", this.DeletedSubscriptions)+",\n")
	keysForSqsSubscriptions := make([]string, 0, len(this.SqsSubscriptions))
	for k, _ := range this.SqsSubscriptions {
		keysForSqsSubscriptions = append(keysForSqsSubscriptions, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForSqsSubscriptions)
	mapStringForSqsSubscriptions := "map[string]*Subscription{"
	for _, k := range keysForSqsSubscriptions {
		mapStringForSqsSubscriptions += fmt.Sprintf("%#v: %#v,", k, this.SqsSubscriptions[k])
	}
	mapStringForSqsSubscriptions += "}"
	if this.SqsSubscriptions != nil {
		s = append(s, "SqsSubscriptions: "+mapStringForSqsSubscriptions+",\n")
	}
	keysForOtherSubscriptions := make([]string, 0, len(this.OtherSubscriptions))
	for k, _ := range this.OtherSubscriptions {
		keysForOtherSubscriptions = append(keysForOtherSubscriptions, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForOtherSubscriptions)
	mapStringForOtherSubscriptions := "map[string]*Subscription{"
	for _, k := range keysForOtherSubscriptions {
		mapStringForOtherSubscriptions += fmt.Sprintf("%#v: %#v,", k, this.OtherSubscriptions[k])
	}
	mapStringForOtherSubscriptions += "}"
	if this.OtherSubscriptions != nil {
		s = append(s, "OtherSubscriptions: "+mapStringForOtherSubscriptions+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TopicNames) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dbdata.TopicNames{")
	s = append(s, "Topics: "+fmt.Sprintf("%#v", this.Topics)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringTopicData(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func extensionToGoStringTopicData(e map[int32]github_com_gogo_protobuf_proto.Extension) string {
	if e == nil {
		return "nil"
	}
	s := "map[int32]proto.Extension{"
	keys := make([]int, 0, len(e))
	for k := range e {
		keys = append(keys, int(k))
	}
	sort.Ints(keys)
	ss := []string{}
	for _, k := range keys {
		ss = append(ss, strconv.Itoa(k)+": "+e[int32(k)].GoString())
	}
	s += strings.Join(ss, ",") + "}"
	return s
}
func (m *Subscription) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Subscription) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Arn) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintTopicData(data, i, uint64(len(m.Arn)))
		i += copy(data[i:], m.Arn)
	}
	if len(m.Owner) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintTopicData(data, i, uint64(len(m.Owner)))
		i += copy(data[i:], m.Owner)
	}
	if len(m.Endpoint) > 0 {
		data[i] = 0x1a
		i++
		i = encodeVarintTopicData(data, i, uint64(len(m.Endpoint)))
		i += copy(data[i:], m.Endpoint)
	}
	if len(m.Protocol) > 0 {
		data[i] = 0x22
		i++
		i = encodeVarintTopicData(data, i, uint64(len(m.Protocol)))
		i += copy(data[i:], m.Protocol)
	}
	if m.RawDelivery {
		data[i] = 0x28
		i++
		if m.RawDelivery {
			data[i] = 1
		} else {
			data[i] = 0
		}
		i++
	}
	if m.Pending {
		data[i] = 0x30
		i++
		if m.Pending {
			data[i] = 1
		} else {
			data[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *Topic) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Topic) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Arn) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintTopicData(data, i, uint64(len(m.Arn)))
		i += copy(data[i:], m.Arn)
	}
	if len(m.Name) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintTopicData(data, i, uint64(len(m.Name)))
		i += copy(data[i:], m.Name)
	}
	if len(m.DisplayName) > 0 {
		data[i] = 0x1a
		i++
		i = encodeVarintTopicData(data, i, uint64(len(m.DisplayName)))
		i += copy(data[i:], m.DisplayName)
	}
	if len(m.Policy) > 0 {
		data[i] = 0x22
		i++
		i = encodeVarintTopicData(data, i, uint64(len(m.Policy)))
		i += copy(data[i:], m.Policy)
	}
	if len(m.DeliveryPolicy) > 0 {
		data[i] = 0x2a
		i++
		i = encodeVarintTopicData(data, i, uint64(len(m.DeliveryPolicy)))
		i += copy(data[i:], m.DeliveryPolicy)
	}
	if len(m.EffectiveDeliveryPolicy) > 0 {
		data[i] = 0x32
		i++
		i = encodeVarintTopicData(data, i, uint64(len(m.EffectiveDeliveryPolicy)))
		i += copy(data[i:], m.EffectiveDeliveryPolicy)
	}
	if m.DeletedSubscriptions != 0 {
		data[i] = 0x38
		i++
		i = encodeVarintTopicData(data, i, uint64(m.DeletedSubscriptions))
	}
	if len(m.SqsSubscriptions) > 0 {
		for k, _ := range m.SqsSubscriptions {
			data[i] = 0x42
			i++
			v := m.SqsSubscriptions[k]
			if v == nil {
				return 0, errors.New("proto: map has nil element")
			}
			msgSize := v.Size()
			mapSize := 1 + len(k) + sovTopicData(uint64(len(k))) + 1 + msgSize + sovTopicData(uint64(msgSize))
			i = encodeVarintTopicData(data, i, uint64(mapSize))
			data[i] = 0xa
			i++
			i = encodeVarintTopicData(data, i, uint64(len(k)))
			i += copy(data[i:], k)
			data[i] = 0x12
			i++
			i = encodeVarintTopicData(data, i, uint64(v.Size()))
			n1, err := v.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n1
		}
	}
	if len(m.OtherSubscriptions) > 0 {
		for k, _ := range m.OtherSubscriptions {
			data[i] = 0x4a
			i++
			v := m.OtherSubscriptions[k]
			if v == nil {
				return 0, errors.New("proto: map has nil element")
			}
			msgSize := v.Size()
			mapSize := 1 + len(k) + sovTopicData(uint64(len(k))) + 1 + msgSize + sovTopicData(uint64(msgSize))
			i = encodeVarintTopicData(data, i, uint64(mapSize))
			data[i] = 0xa
			i++
			i = encodeVarintTopicData(data, i, uint64(len(k)))
			i += copy(data[i:], k)
			data[i] = 0x12
			i++
			i = encodeVarintTopicData(data, i, uint64(v.Size()))
			n2, err := v.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n2
		}
	}
	return i, nil
}

func (m *TopicNames) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *TopicNames) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Topics) > 0 {
		for _, s := range m.Topics {
			data[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				data[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			data[i] = uint8(l)
			i++
			i += copy(data[i:], s)
		}
	}
	return i, nil
}

func encodeFixed64TopicData(data []byte, offset int, v uint64) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	data[offset+4] = uint8(v >> 32)
	data[offset+5] = uint8(v >> 40)
	data[offset+6] = uint8(v >> 48)
	data[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32TopicData(data []byte, offset int, v uint32) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintTopicData(data []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		data[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	data[offset] = uint8(v)
	return offset + 1
}
func (m *Subscription) Size() (n int) {
	var l int
	_ = l
	l = len(m.Arn)
	if l > 0 {
		n += 1 + l + sovTopicData(uint64(l))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovTopicData(uint64(l))
	}
	l = len(m.Endpoint)
	if l > 0 {
		n += 1 + l + sovTopicData(uint64(l))
	}
	l = len(m.Protocol)
	if l > 0 {
		n += 1 + l + sovTopicData(uint64(l))
	}
	if m.RawDelivery {
		n += 2
	}
	if m.Pending {
		n += 2
	}
	return n
}

func (m *Topic) Size() (n int) {
	var l int
	_ = l
	l = len(m.Arn)
	if l > 0 {
		n += 1 + l + sovTopicData(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTopicData(uint64(l))
	}
	l = len(m.DisplayName)
	if l > 0 {
		n += 1 + l + sovTopicData(uint64(l))
	}
	l = len(m.Policy)
	if l > 0 {
		n += 1 + l + sovTopicData(uint64(l))
	}
	l = len(m.DeliveryPolicy)
	if l > 0 {
		n += 1 + l + sovTopicData(uint64(l))
	}
	l = len(m.EffectiveDeliveryPolicy)
	if l > 0 {
		n += 1 + l + sovTopicData(uint64(l))
	}
	if m.DeletedSubscriptions != 0 {
		n += 1 + sovTopicData(uint64(m.DeletedSubscriptions))
	}
	if len(m.SqsSubscriptions) > 0 {
		for k, v := range m.SqsSubscriptions {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
			}
			mapEntrySize := 1 + len(k) + sovTopicData(uint64(len(k))) + 1 + l + sovTopicData(uint64(l))
			n += mapEntrySize + 1 + sovTopicData(uint64(mapEntrySize))
		}
	}
	if len(m.OtherSubscriptions) > 0 {
		for k, v := range m.OtherSubscriptions {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
			}
			mapEntrySize := 1 + len(k) + sovTopicData(uint64(len(k))) + 1 + l + sovTopicData(uint64(l))
			n += mapEntrySize + 1 + sovTopicData(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *TopicNames) Size() (n int) {
	var l int
	_ = l
	if len(m.Topics) > 0 {
		for _, s := range m.Topics {
			l = len(s)
			n += 1 + l + sovTopicData(uint64(l))
		}
	}
	return n
}

func sovTopicData(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozTopicData(x uint64) (n int) {
	return sovTopicData(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Subscription) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Subscription{`,
		`Arn:` + fmt.Sprintf("%v", this.Arn) + `,`,
		`Owner:` + fmt.Sprintf("%v", this.Owner) + `,`,
		`Endpoint:` + fmt.Sprintf("%v", this.Endpoint) + `,`,
		`Protocol:` + fmt.Sprintf("%v", this.Protocol) + `,`,
		`RawDelivery:` + fmt.Sprintf("%v", this.RawDelivery) + `,`,
		`Pending:` + fmt.Sprintf("%v", this.Pending) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Topic) String() string {
	if this == nil {
		return "nil"
	}
	keysForSqsSubscriptions := make([]string, 0, len(this.SqsSubscriptions))
	for k, _ := range this.SqsSubscriptions {
		keysForSqsSubscriptions = append(keysForSqsSubscriptions, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForSqsSubscriptions)
	mapStringForSqsSubscriptions := "map[string]*Subscription{"
	for _, k := range keysForSqsSubscriptions {
		mapStringForSqsSubscriptions += fmt.Sprintf("%v: %v,", k, this.SqsSubscriptions[k])
	}
	mapStringForSqsSubscriptions += "}"
	keysForOtherSubscriptions := make([]string, 0, len(this.OtherSubscriptions))
	for k, _ := range this.OtherSubscriptions {
		keysForOtherSubscriptions = append(keysForOtherSubscriptions, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForOtherSubscriptions)
	mapStringForOtherSubscriptions := "map[string]*Subscription{"
	for _, k := range keysForOtherSubscriptions {
		mapStringForOtherSubscriptions += fmt.Sprintf("%v: %v,", k, this.OtherSubscriptions[k])
	}
	mapStringForOtherSubscriptions += "}"
	s := strings.Join([]string{`&Topic{`,
		`Arn:` + fmt.Sprintf("%v", this.Arn) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`DisplayName:` + fmt.Sprintf("%v", this.DisplayName) + `,`,
		`Policy:` + fmt.Sprintf("%v", this.Policy) + `,`,
		`DeliveryPolicy:` + fmt.Sprintf("%v", this.DeliveryPolicy) + `,`,
		`EffectiveDeliveryPolicy:` + fmt.Sprintf("%v", this.EffectiveDeliveryPolicy) + `,`,
		`DeletedSubscriptions:` + fmt.Sprintf("%v", this.DeletedSubscriptions) + `,`,
		`SqsSubscriptions:` + mapStringForSqsSubscriptions + `,`,
		`OtherSubscriptions:` + mapStringForOtherSubscriptions + `,`,
		`}`,
	}, "")
	return s
}
func (this *TopicNames) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TopicNames{`,
		`Topics:` + fmt.Sprintf("%v", this.Topics) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringTopicData(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Subscription) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTopicData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Subscription: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Subscription: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Arn", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopicData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTopicData
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Arn = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopicData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTopicData
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Endpoint", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopicData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTopicData
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Endpoint = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Protocol", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopicData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTopicData
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Protocol = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RawDelivery", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopicData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RawDelivery = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pending", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopicData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Pending = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTopicData(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTopicData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Topic) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTopicData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Topic: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Topic: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Arn", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopicData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTopicData
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Arn = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopicData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTopicData
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisplayName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopicData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTopicData
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DisplayName = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Policy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopicData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTopicData
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Policy = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeliveryPolicy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopicData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTopicData
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeliveryPolicy = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EffectiveDeliveryPolicy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopicData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTopicData
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EffectiveDeliveryPolicy = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeletedSubscriptions", wireType)
			}
			m.DeletedSubscriptions = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopicData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.DeletedSubscriptions |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SqsSubscriptions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopicData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTopicData
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var keykey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopicData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				keykey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var stringLenmapkey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopicData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLenmapkey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLenmapkey := int(stringLenmapkey)
			if intStringLenmapkey < 0 {
				return ErrInvalidLengthTopicData
			}
			postStringIndexmapkey := iNdEx + intStringLenmapkey
			if postStringIndexmapkey > l {
				return io.ErrUnexpectedEOF
			}
			mapkey := string(data[iNdEx:postStringIndexmapkey])
			iNdEx = postStringIndexmapkey
			var valuekey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopicData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				valuekey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var mapmsglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopicData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				mapmsglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if mapmsglen < 0 {
				return ErrInvalidLengthTopicData
			}
			postmsgIndex := iNdEx + mapmsglen
			if mapmsglen < 0 {
				return ErrInvalidLengthTopicData
			}
			if postmsgIndex > l {
				return io.ErrUnexpectedEOF
			}
			mapvalue := &Subscription{}
			if err := mapvalue.Unmarshal(data[iNdEx:postmsgIndex]); err != nil {
				return err
			}
			iNdEx = postmsgIndex
			if m.SqsSubscriptions == nil {
				m.SqsSubscriptions = make(map[string]*Subscription)
			}
			m.SqsSubscriptions[mapkey] = mapvalue
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OtherSubscriptions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopicData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTopicData
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var keykey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopicData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				keykey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var stringLenmapkey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopicData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLenmapkey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLenmapkey := int(stringLenmapkey)
			if intStringLenmapkey < 0 {
				return ErrInvalidLengthTopicData
			}
			postStringIndexmapkey := iNdEx + intStringLenmapkey
			if postStringIndexmapkey > l {
				return io.ErrUnexpectedEOF
			}
			mapkey := string(data[iNdEx:postStringIndexmapkey])
			iNdEx = postStringIndexmapkey
			var valuekey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopicData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				valuekey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var mapmsglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopicData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				mapmsglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if mapmsglen < 0 {
				return ErrInvalidLengthTopicData
			}
			postmsgIndex := iNdEx + mapmsglen
			if mapmsglen < 0 {
				return ErrInvalidLengthTopicData
			}
			if postmsgIndex > l {
				return io.ErrUnexpectedEOF
			}
			mapvalue := &Subscription{}
			if err := mapvalue.Unmarshal(data[iNdEx:postmsgIndex]); err != nil {
				return err
			}
			iNdEx = postmsgIndex
			if m.OtherSubscriptions == nil {
				m.OtherSubscriptions = make(map[string]*Subscription)
			}
			m.OtherSubscriptions[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTopicData(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTopicData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TopicNames) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTopicData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TopicNames: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TopicNames: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Topics", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTopicData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTopicData
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Topics = append(m.Topics, string(data[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTopicData(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTopicData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTopicData(data []byte) (n int, err error) {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTopicData
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTopicData
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if data[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTopicData
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthTopicData
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowTopicData
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipTopicData(data[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthTopicData = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTopicData   = fmt.Errorf("proto: integer overflow")
)

var fileDescriptorTopicData = []byte{
	// 478 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xa4, 0x53, 0xc1, 0x6e, 0xd3, 0x40,
	0x10, 0xad, 0xeb, 0xd8, 0x4d, 0x27, 0x15, 0x94, 0x25, 0xa5, 0x26, 0x87, 0xa8, 0x04, 0x50, 0x2b,
	0x84, 0x12, 0xa9, 0xbd, 0xa0, 0x1e, 0x51, 0xb9, 0x42, 0xe5, 0x22, 0x24, 0xc4, 0xc1, 0x72, 0xec,
	0x2d, 0xac, 0x30, 0xbb, 0xee, 0xee, 0xb6, 0x95, 0x6f, 0x7c, 0x02, 0x9f, 0x81, 0xc4, 0x8f, 0x70,
	0xec, 0x91, 0x23, 0x2d, 0x1c, 0x38, 0xf2, 0x09, 0xcc, 0xee, 0xda, 0x55, 0x62, 0xc2, 0x89, 0xc3,
	0x28, 0x33, 0xef, 0xcd, 0x9b, 0x7d, 0xce, 0xec, 0xc2, 0xb6, 0xa2, 0xf2, 0x8c, 0xca, 0x89, 0xe2,
	0xaa, 0x94, 0x42, 0x8b, 0x49, 0x3e, 0xcd, 0x53, 0x9d, 0x4e, 0xb4, 0x28, 0x59, 0x96, 0x98, 0x74,
	0x6c, 0x71, 0x12, 0x3a, 0x62, 0xf4, 0xc5, 0x83, 0xb5, 0xa3, 0xd3, 0xa9, 0xca, 0x24, 0x2b, 0x35,
	0x13, 0x9c, 0xac, 0x83, 0x9f, 0x4a, 0x1e, 0x79, 0x5b, 0xde, 0xce, 0x6a, 0x6c, 0x52, 0xd2, 0x87,
	0x40, 0x9c, 0x73, 0x2a, 0xa3, 0x65, 0x8b, 0xb9, 0x82, 0x0c, 0xa0, 0x4b, 0x79, 0x5e, 0x0a, 0xc6,
	0x75, 0xe4, 0x5b, 0xe2, 0xba, 0x36, 0x9c, 0x3d, 0x25, 0x13, 0x45, 0xd4, 0x71, 0x5c, 0x53, 0x93,
	0x7b, 0xb0, 0x26, 0xd3, 0xf3, 0x24, 0xa7, 0x05, 0x43, 0xa3, 0x55, 0x14, 0x20, 0xdf, 0x8d, 0x7b,
	0x88, 0x1d, 0xd4, 0x10, 0x89, 0x60, 0xa5, 0xc4, 0x59, 0x8c, 0xbf, 0x8d, 0x42, 0xcb, 0x36, 0xe5,
	0xe8, 0x67, 0x07, 0x82, 0x97, 0xe6, 0x53, 0x16, 0xd8, 0x24, 0xd0, 0xe1, 0xe9, 0x07, 0x5a, 0xbb,
	0xb4, 0xb9, 0x39, 0x2c, 0x67, 0xaa, 0x2c, 0xd2, 0x2a, 0xb1, 0x9c, 0x33, 0xda, 0xab, 0xb1, 0xe7,
	0xa6, 0xe5, 0x0e, 0x84, 0xa5, 0x28, 0x58, 0x56, 0xd5, 0x4e, 0xeb, 0x8a, 0x6c, 0xc3, 0xcd, 0xc6,
	0x63, 0x52, 0x37, 0x04, 0xb6, 0xe1, 0x46, 0x03, 0x1f, 0xba, 0xc6, 0x7d, 0xb8, 0x4b, 0x8f, 0x8f,
	0x69, 0xa6, 0x11, 0x4c, 0xda, 0x92, 0xd0, 0x4a, 0x36, 0xaf, 0x1b, 0x0e, 0xe6, 0xb5, 0x7b, 0xb0,
	0x81, 0x0a, 0xaa, 0x69, 0x9e, 0xa8, 0x99, 0x25, 0xa8, 0x68, 0x05, 0x75, 0x7e, 0xdc, 0xaf, 0xc9,
	0xd9, 0x05, 0x29, 0x72, 0x08, 0xb7, 0xd4, 0x89, 0x6a, 0x09, 0xba, 0x5b, 0xfe, 0x4e, 0x6f, 0xf7,
	0xfe, 0xd8, 0xad, 0x75, 0x6c, 0xff, 0xa4, 0xf1, 0xd1, 0x89, 0x9a, 0x93, 0x3e, 0xe3, 0x5a, 0x56,
	0xf1, 0xba, 0x6a, 0xc1, 0xe4, 0x15, 0xdc, 0x16, 0xfa, 0x1d, 0x95, 0xad, 0x99, 0xab, 0x76, 0xe6,
	0xc3, 0xf9, 0x99, 0x2f, 0x4c, 0xe3, 0x82, 0xa9, 0x44, 0xfc, 0x45, 0x0c, 0x5e, 0xc3, 0xc6, 0x42,
	0x0b, 0x66, 0x7b, 0xef, 0x69, 0xd5, 0x6c, 0x0f, 0x53, 0xf2, 0x08, 0x82, 0xb3, 0xb4, 0x38, 0x75,
	0xeb, 0xeb, 0xed, 0xf6, 0x9b, 0x43, 0x67, 0xc5, 0xb1, 0x6b, 0xd9, 0x5f, 0x7e, 0xe2, 0x0d, 0xde,
	0xc0, 0xe6, 0x3f, 0x9c, 0xfc, 0xff, 0xf0, 0xd1, 0x03, 0x00, 0xfb, 0xb1, 0xe6, 0x82, 0x28, 0x73,
	0x43, 0xec, 0xf3, 0x51, 0x38, 0xd2, 0x37, 0x37, 0xc4, 0x55, 0x4f, 0x1f, 0x5f, 0x5c, 0x0e, 0x97,
	0xbe, 0x61, 0xfc, 0xbe, 0x1c, 0x7a, 0x1f, 0xaf, 0x86, 0xde, 0x67, 0x8c, 0xaf, 0x18, 0x17, 0x18,
	0xdf, 0x31, 0x7e, 0x5d, 0x21, 0x87, 0xbf, 0x9f, 0x7e, 0x0c, 0x97, 0xa6, 0xa1, 0x7d, 0x01, 0x7b,
	0x7f, 0x02, 0x00, 0x00, 0xff, 0xff, 0x8a, 0x1f, 0x1f, 0x6a, 0xa2, 0x03, 0x00, 0x00,
}
