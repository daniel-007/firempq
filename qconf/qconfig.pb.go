// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: qconf/qconfig.proto

/*
	Package qconf is a generated protocol buffer package.

	It is generated from these files:
		qconf/qconfig.proto

	It has these top-level messages:
		QueueConfig
*/
package qconf

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import strings "strings"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type QueueConfig struct {
	// Default message TTL.
	MsgTtl int64 `protobuf:"varint,1,opt,name=msg_ttl,json=msgTtl,proto3" json:"msg_ttl,omitempty"`
	// Default delivery delay.
	DeliveryDelay int64 `protobuf:"varint,2,opt,name=delivery_delay,json=deliveryDelay,proto3" json:"delivery_delay,omitempty"`
	// Timeout before message is getting released.
	PopLockTimeout int64 `protobuf:"varint,3,opt,name=pop_lock_timeout,json=popLockTimeout,proto3" json:"pop_lock_timeout,omitempty"`
	// Pop count limit. 0 - unlimited. >0 Will be removed after this number of attempts.
	PopCountLimit int64 `protobuf:"varint,4,opt,name=pop_count_limit,json=popCountLimit,proto3" json:"pop_count_limit,omitempty"`
	// Max queue size.
	MaxMsgsInQueue int64 `protobuf:"varint,5,opt,name=max_msgs_in_queue,json=maxMsgsInQueue,proto3" json:"max_msgs_in_queue,omitempty"`
	// Max message size in bytes;
	MaxMsgSize int64 `protobuf:"varint,6,opt,name=max_msg_size,json=maxMsgSize,proto3" json:"max_msg_size,omitempty"`
	// Last time item has been pushed into queue.
	LastPushTs int64 `protobuf:"varint,7,opt,name=last_push_ts,json=lastPushTs,proto3" json:"last_push_ts,omitempty"`
	// Last pop time.
	LastPopTs int64 `protobuf:"varint,8,opt,name=last_pop_ts,json=lastPopTs,proto3" json:"last_pop_ts,omitempty"`
	// Pop wait timeout.
	PopWaitTimeout int64 `protobuf:"varint,9,opt,name=pop_wait_timeout,json=popWaitTimeout,proto3" json:"pop_wait_timeout,omitempty"`
	// Messages exceeded number of pop attemts will be moved into this queue if configured
	PopLimitQueueName string `protobuf:"bytes,10,opt,name=pop_limit_queue_name,json=popLimitQueueName,proto3" json:"pop_limit_queue_name,omitempty"`
	// Time stamp config was modified last time.
	LastUpdateTs int64 `protobuf:"varint,11,opt,name=last_update_ts,json=lastUpdateTs,proto3" json:"last_update_ts,omitempty"`
}

func (m *QueueConfig) Reset()                    { *m = QueueConfig{} }
func (*QueueConfig) ProtoMessage()               {}
func (*QueueConfig) Descriptor() ([]byte, []int) { return fileDescriptorQconfig, []int{0} }

func (m *QueueConfig) GetMsgTtl() int64 {
	if m != nil {
		return m.MsgTtl
	}
	return 0
}

func (m *QueueConfig) GetDeliveryDelay() int64 {
	if m != nil {
		return m.DeliveryDelay
	}
	return 0
}

func (m *QueueConfig) GetPopLockTimeout() int64 {
	if m != nil {
		return m.PopLockTimeout
	}
	return 0
}

func (m *QueueConfig) GetPopCountLimit() int64 {
	if m != nil {
		return m.PopCountLimit
	}
	return 0
}

func (m *QueueConfig) GetMaxMsgsInQueue() int64 {
	if m != nil {
		return m.MaxMsgsInQueue
	}
	return 0
}

func (m *QueueConfig) GetMaxMsgSize() int64 {
	if m != nil {
		return m.MaxMsgSize
	}
	return 0
}

func (m *QueueConfig) GetLastPushTs() int64 {
	if m != nil {
		return m.LastPushTs
	}
	return 0
}

func (m *QueueConfig) GetLastPopTs() int64 {
	if m != nil {
		return m.LastPopTs
	}
	return 0
}

func (m *QueueConfig) GetPopWaitTimeout() int64 {
	if m != nil {
		return m.PopWaitTimeout
	}
	return 0
}

func (m *QueueConfig) GetPopLimitQueueName() string {
	if m != nil {
		return m.PopLimitQueueName
	}
	return ""
}

func (m *QueueConfig) GetLastUpdateTs() int64 {
	if m != nil {
		return m.LastUpdateTs
	}
	return 0
}

func init() {
	proto.RegisterType((*QueueConfig)(nil), "qconf.QueueConfig")
}
func (this *QueueConfig) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*QueueConfig)
	if !ok {
		that2, ok := that.(QueueConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.MsgTtl != that1.MsgTtl {
		return false
	}
	if this.DeliveryDelay != that1.DeliveryDelay {
		return false
	}
	if this.PopLockTimeout != that1.PopLockTimeout {
		return false
	}
	if this.PopCountLimit != that1.PopCountLimit {
		return false
	}
	if this.MaxMsgsInQueue != that1.MaxMsgsInQueue {
		return false
	}
	if this.MaxMsgSize != that1.MaxMsgSize {
		return false
	}
	if this.LastPushTs != that1.LastPushTs {
		return false
	}
	if this.LastPopTs != that1.LastPopTs {
		return false
	}
	if this.PopWaitTimeout != that1.PopWaitTimeout {
		return false
	}
	if this.PopLimitQueueName != that1.PopLimitQueueName {
		return false
	}
	if this.LastUpdateTs != that1.LastUpdateTs {
		return false
	}
	return true
}
func (this *QueueConfig) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 15)
	s = append(s, "&qconf.QueueConfig{")
	s = append(s, "MsgTtl: "+fmt.Sprintf("%#v", this.MsgTtl)+",\n")
	s = append(s, "DeliveryDelay: "+fmt.Sprintf("%#v", this.DeliveryDelay)+",\n")
	s = append(s, "PopLockTimeout: "+fmt.Sprintf("%#v", this.PopLockTimeout)+",\n")
	s = append(s, "PopCountLimit: "+fmt.Sprintf("%#v", this.PopCountLimit)+",\n")
	s = append(s, "MaxMsgsInQueue: "+fmt.Sprintf("%#v", this.MaxMsgsInQueue)+",\n")
	s = append(s, "MaxMsgSize: "+fmt.Sprintf("%#v", this.MaxMsgSize)+",\n")
	s = append(s, "LastPushTs: "+fmt.Sprintf("%#v", this.LastPushTs)+",\n")
	s = append(s, "LastPopTs: "+fmt.Sprintf("%#v", this.LastPopTs)+",\n")
	s = append(s, "PopWaitTimeout: "+fmt.Sprintf("%#v", this.PopWaitTimeout)+",\n")
	s = append(s, "PopLimitQueueName: "+fmt.Sprintf("%#v", this.PopLimitQueueName)+",\n")
	s = append(s, "LastUpdateTs: "+fmt.Sprintf("%#v", this.LastUpdateTs)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringQconfig(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *QueueConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueueConfig) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.MsgTtl != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintQconfig(dAtA, i, uint64(m.MsgTtl))
	}
	if m.DeliveryDelay != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintQconfig(dAtA, i, uint64(m.DeliveryDelay))
	}
	if m.PopLockTimeout != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintQconfig(dAtA, i, uint64(m.PopLockTimeout))
	}
	if m.PopCountLimit != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintQconfig(dAtA, i, uint64(m.PopCountLimit))
	}
	if m.MaxMsgsInQueue != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintQconfig(dAtA, i, uint64(m.MaxMsgsInQueue))
	}
	if m.MaxMsgSize != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintQconfig(dAtA, i, uint64(m.MaxMsgSize))
	}
	if m.LastPushTs != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintQconfig(dAtA, i, uint64(m.LastPushTs))
	}
	if m.LastPopTs != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintQconfig(dAtA, i, uint64(m.LastPopTs))
	}
	if m.PopWaitTimeout != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintQconfig(dAtA, i, uint64(m.PopWaitTimeout))
	}
	if len(m.PopLimitQueueName) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintQconfig(dAtA, i, uint64(len(m.PopLimitQueueName)))
		i += copy(dAtA[i:], m.PopLimitQueueName)
	}
	if m.LastUpdateTs != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintQconfig(dAtA, i, uint64(m.LastUpdateTs))
	}
	return i, nil
}

func encodeVarintQconfig(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *QueueConfig) Size() (n int) {
	var l int
	_ = l
	if m.MsgTtl != 0 {
		n += 1 + sovQconfig(uint64(m.MsgTtl))
	}
	if m.DeliveryDelay != 0 {
		n += 1 + sovQconfig(uint64(m.DeliveryDelay))
	}
	if m.PopLockTimeout != 0 {
		n += 1 + sovQconfig(uint64(m.PopLockTimeout))
	}
	if m.PopCountLimit != 0 {
		n += 1 + sovQconfig(uint64(m.PopCountLimit))
	}
	if m.MaxMsgsInQueue != 0 {
		n += 1 + sovQconfig(uint64(m.MaxMsgsInQueue))
	}
	if m.MaxMsgSize != 0 {
		n += 1 + sovQconfig(uint64(m.MaxMsgSize))
	}
	if m.LastPushTs != 0 {
		n += 1 + sovQconfig(uint64(m.LastPushTs))
	}
	if m.LastPopTs != 0 {
		n += 1 + sovQconfig(uint64(m.LastPopTs))
	}
	if m.PopWaitTimeout != 0 {
		n += 1 + sovQconfig(uint64(m.PopWaitTimeout))
	}
	l = len(m.PopLimitQueueName)
	if l > 0 {
		n += 1 + l + sovQconfig(uint64(l))
	}
	if m.LastUpdateTs != 0 {
		n += 1 + sovQconfig(uint64(m.LastUpdateTs))
	}
	return n
}

func sovQconfig(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozQconfig(x uint64) (n int) {
	return sovQconfig(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *QueueConfig) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&QueueConfig{`,
		`MsgTtl:` + fmt.Sprintf("%v", this.MsgTtl) + `,`,
		`DeliveryDelay:` + fmt.Sprintf("%v", this.DeliveryDelay) + `,`,
		`PopLockTimeout:` + fmt.Sprintf("%v", this.PopLockTimeout) + `,`,
		`PopCountLimit:` + fmt.Sprintf("%v", this.PopCountLimit) + `,`,
		`MaxMsgsInQueue:` + fmt.Sprintf("%v", this.MaxMsgsInQueue) + `,`,
		`MaxMsgSize:` + fmt.Sprintf("%v", this.MaxMsgSize) + `,`,
		`LastPushTs:` + fmt.Sprintf("%v", this.LastPushTs) + `,`,
		`LastPopTs:` + fmt.Sprintf("%v", this.LastPopTs) + `,`,
		`PopWaitTimeout:` + fmt.Sprintf("%v", this.PopWaitTimeout) + `,`,
		`PopLimitQueueName:` + fmt.Sprintf("%v", this.PopLimitQueueName) + `,`,
		`LastUpdateTs:` + fmt.Sprintf("%v", this.LastUpdateTs) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringQconfig(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *QueueConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQconfig
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueueConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueueConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgTtl", wireType)
			}
			m.MsgTtl = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQconfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgTtl |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeliveryDelay", wireType)
			}
			m.DeliveryDelay = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQconfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DeliveryDelay |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PopLockTimeout", wireType)
			}
			m.PopLockTimeout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQconfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PopLockTimeout |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PopCountLimit", wireType)
			}
			m.PopCountLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQconfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PopCountLimit |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxMsgsInQueue", wireType)
			}
			m.MaxMsgsInQueue = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQconfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxMsgsInQueue |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxMsgSize", wireType)
			}
			m.MaxMsgSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQconfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxMsgSize |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastPushTs", wireType)
			}
			m.LastPushTs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQconfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastPushTs |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastPopTs", wireType)
			}
			m.LastPopTs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQconfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastPopTs |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PopWaitTimeout", wireType)
			}
			m.PopWaitTimeout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQconfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PopWaitTimeout |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PopLimitQueueName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQconfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQconfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PopLimitQueueName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastUpdateTs", wireType)
			}
			m.LastUpdateTs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQconfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastUpdateTs |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQconfig(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQconfig
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQconfig(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQconfig
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQconfig
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQconfig
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthQconfig
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowQconfig
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipQconfig(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthQconfig = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQconfig   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("qconf/qconfig.proto", fileDescriptorQconfig) }

var fileDescriptorQconfig = []byte{
	// 385 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x3c, 0x91, 0xb1, 0x6e, 0x1a, 0x31,
	0x18, 0xc7, 0xcf, 0xa5, 0x40, 0x31, 0x2d, 0x2d, 0x6e, 0xa5, 0x7a, 0xb2, 0x50, 0xd5, 0x56, 0x54,
	0xaa, 0xca, 0xd0, 0x37, 0x28, 0x5d, 0x2a, 0xd1, 0xaa, 0xa5, 0x17, 0x65, 0xb4, 0x9c, 0xc3, 0x39,
	0x2c, 0xce, 0x67, 0x83, 0x7d, 0x09, 0x30, 0xe5, 0x11, 0xf2, 0x18, 0xd9, 0xf2, 0x1a, 0x19, 0x19,
	0x33, 0x86, 0xcb, 0x92, 0x91, 0x47, 0x88, 0xfc, 0x5d, 0x60, 0x39, 0xe9, 0x7e, 0xdf, 0x4f, 0x9f,
	0xff, 0x7f, 0x1b, 0xbf, 0x9d, 0x27, 0x26, 0x3f, 0x1d, 0xc0, 0x57, 0xa5, 0xdf, 0xec, 0xc2, 0x78,
	0x43, 0xea, 0xf0, 0xfb, 0xe1, 0xba, 0x86, 0xdb, 0xff, 0x0a, 0x59, 0xc8, 0x21, 0x0c, 0xc9, 0x7b,
	0xdc, 0xd4, 0x2e, 0xe5, 0xde, 0x67, 0x14, 0xf5, 0x50, 0xbf, 0x36, 0x6e, 0x68, 0x97, 0xc6, 0x3e,
	0x23, 0x9f, 0x70, 0x67, 0x22, 0x33, 0x75, 0x26, 0x17, 0x2b, 0x3e, 0x91, 0x99, 0x58, 0xd1, 0x67,
	0x30, 0x7f, 0xb5, 0xa7, 0x3f, 0x03, 0x24, 0x7d, 0xfc, 0xc6, 0x1a, 0xcb, 0x33, 0x93, 0xcc, 0xb8,
	0x57, 0x5a, 0x9a, 0xc2, 0xd3, 0x1a, 0x88, 0x1d, 0x6b, 0xec, 0xc8, 0x24, 0xb3, 0xb8, 0xa2, 0xe4,
	0x33, 0x7e, 0x1d, 0xcc, 0xc4, 0x14, 0xb9, 0xe7, 0x99, 0xd2, 0xca, 0xd3, 0xe7, 0xd5, 0x46, 0x6b,
	0xec, 0x30, 0xd0, 0x51, 0x80, 0xe4, 0x0b, 0xee, 0x6a, 0xb1, 0xe4, 0xda, 0xa5, 0x8e, 0xab, 0x9c,
	0xcf, 0x43, 0x58, 0x5a, 0xaf, 0x56, 0x6a, 0xb1, 0xfc, 0xed, 0x52, 0xf7, 0x2b, 0x87, 0x0a, 0xa4,
	0x87, 0x5f, 0x3e, 0xa9, 0xdc, 0xa9, 0xb5, 0xa4, 0x0d, 0xb0, 0x70, 0x65, 0xfd, 0x57, 0x6b, 0x30,
	0x32, 0xe1, 0x3c, 0xb7, 0x85, 0x9b, 0x72, 0xef, 0x68, 0xb3, 0x32, 0x02, 0xfb, 0x5b, 0xb8, 0x69,
	0xec, 0x08, 0xc3, 0xed, 0xca, 0x30, 0x36, 0x08, 0x2f, 0x40, 0x68, 0x81, 0x60, 0x6c, 0xec, 0xf6,
	0x05, 0xcf, 0x85, 0xf2, 0x87, 0x82, 0xad, 0x43, 0xc1, 0x63, 0xa1, 0xfc, 0xbe, 0xe0, 0x00, 0xbf,
	0x83, 0xab, 0x08, 0x2d, 0xaa, 0xd8, 0x3c, 0x17, 0x5a, 0x52, 0xdc, 0x43, 0xfd, 0xd6, 0xb8, 0x1b,
	0xae, 0x23, 0x8c, 0x20, 0xfa, 0x1f, 0xa1, 0x25, 0xf9, 0x88, 0x3b, 0x70, 0x74, 0x61, 0x27, 0xc2,
	0xcb, 0x70, 0x7a, 0x1b, 0x16, 0x43, 0xe4, 0x23, 0x80, 0xb1, 0xfb, 0xf1, 0x75, 0xb3, 0x65, 0xd1,
	0xed, 0x96, 0x45, 0xbb, 0x2d, 0x43, 0x17, 0x25, 0x43, 0x57, 0x25, 0x43, 0x37, 0x25, 0x43, 0x9b,
	0x92, 0xa1, 0xbb, 0x92, 0xa1, 0x87, 0x92, 0x45, 0xbb, 0x92, 0xa1, 0xcb, 0x7b, 0x16, 0x9d, 0x34,
	0xe0, 0xb5, 0xbf, 0x3f, 0x06, 0x00, 0x00, 0xff, 0xff, 0xab, 0xc0, 0xbb, 0x10, 0x04, 0x02, 0x00,
	0x00,
}
