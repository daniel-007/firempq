// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: qconf/queue_desc.proto

/*
	Package qconf is a generated protocol buffer package.

	It is generated from these files:
		qconf/queue_desc.proto

	It has these top-level messages:
		QueueDescription
*/
package qconf

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import strings "strings"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type QueueDescription struct {
	ExportId  uint64 `protobuf:"varint,1,req,name=export_id,json=exportId" json:"export_id"`
	SType     string `protobuf:"bytes,2,req,name=s_type,json=sType" json:"s_type"`
	Name      string `protobuf:"bytes,3,req,name=name" json:"name"`
	CreateTs  int64  `protobuf:"varint,4,req,name=create_ts,json=createTs" json:"create_ts"`
	Disabled  bool   `protobuf:"varint,5,req,name=disabled" json:"disabled"`
	ToDelete  bool   `protobuf:"varint,6,req,name=to_delete,json=toDelete" json:"to_delete"`
	ServiceId string `protobuf:"bytes,7,req,name=service_id,json=serviceId" json:"service_id"`
}

func (m *QueueDescription) Reset()                    { *m = QueueDescription{} }
func (*QueueDescription) ProtoMessage()               {}
func (*QueueDescription) Descriptor() ([]byte, []int) { return fileDescriptorQueueDesc, []int{0} }

func (m *QueueDescription) GetExportId() uint64 {
	if m != nil {
		return m.ExportId
	}
	return 0
}

func (m *QueueDescription) GetSType() string {
	if m != nil {
		return m.SType
	}
	return ""
}

func (m *QueueDescription) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *QueueDescription) GetCreateTs() int64 {
	if m != nil {
		return m.CreateTs
	}
	return 0
}

func (m *QueueDescription) GetDisabled() bool {
	if m != nil {
		return m.Disabled
	}
	return false
}

func (m *QueueDescription) GetToDelete() bool {
	if m != nil {
		return m.ToDelete
	}
	return false
}

func (m *QueueDescription) GetServiceId() string {
	if m != nil {
		return m.ServiceId
	}
	return ""
}

func init() {
	proto.RegisterType((*QueueDescription)(nil), "qconf.QueueDescription")
}
func (this *QueueDescription) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*QueueDescription)
	if !ok {
		that2, ok := that.(QueueDescription)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ExportId != that1.ExportId {
		return false
	}
	if this.SType != that1.SType {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.CreateTs != that1.CreateTs {
		return false
	}
	if this.Disabled != that1.Disabled {
		return false
	}
	if this.ToDelete != that1.ToDelete {
		return false
	}
	if this.ServiceId != that1.ServiceId {
		return false
	}
	return true
}
func (this *QueueDescription) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&qconf.QueueDescription{")
	s = append(s, "ExportId: "+fmt.Sprintf("%#v", this.ExportId)+",\n")
	s = append(s, "SType: "+fmt.Sprintf("%#v", this.SType)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "CreateTs: "+fmt.Sprintf("%#v", this.CreateTs)+",\n")
	s = append(s, "Disabled: "+fmt.Sprintf("%#v", this.Disabled)+",\n")
	s = append(s, "ToDelete: "+fmt.Sprintf("%#v", this.ToDelete)+",\n")
	s = append(s, "ServiceId: "+fmt.Sprintf("%#v", this.ServiceId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringQueueDesc(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *QueueDescription) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueueDescription) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintQueueDesc(dAtA, i, uint64(m.ExportId))
	dAtA[i] = 0x12
	i++
	i = encodeVarintQueueDesc(dAtA, i, uint64(len(m.SType)))
	i += copy(dAtA[i:], m.SType)
	dAtA[i] = 0x1a
	i++
	i = encodeVarintQueueDesc(dAtA, i, uint64(len(m.Name)))
	i += copy(dAtA[i:], m.Name)
	dAtA[i] = 0x20
	i++
	i = encodeVarintQueueDesc(dAtA, i, uint64(m.CreateTs))
	dAtA[i] = 0x28
	i++
	if m.Disabled {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	dAtA[i] = 0x30
	i++
	if m.ToDelete {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	dAtA[i] = 0x3a
	i++
	i = encodeVarintQueueDesc(dAtA, i, uint64(len(m.ServiceId)))
	i += copy(dAtA[i:], m.ServiceId)
	return i, nil
}

func encodeVarintQueueDesc(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *QueueDescription) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovQueueDesc(uint64(m.ExportId))
	l = len(m.SType)
	n += 1 + l + sovQueueDesc(uint64(l))
	l = len(m.Name)
	n += 1 + l + sovQueueDesc(uint64(l))
	n += 1 + sovQueueDesc(uint64(m.CreateTs))
	n += 2
	n += 2
	l = len(m.ServiceId)
	n += 1 + l + sovQueueDesc(uint64(l))
	return n
}

func sovQueueDesc(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozQueueDesc(x uint64) (n int) {
	return sovQueueDesc(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *QueueDescription) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&QueueDescription{`,
		`ExportId:` + fmt.Sprintf("%v", this.ExportId) + `,`,
		`SType:` + fmt.Sprintf("%v", this.SType) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`CreateTs:` + fmt.Sprintf("%v", this.CreateTs) + `,`,
		`Disabled:` + fmt.Sprintf("%v", this.Disabled) + `,`,
		`ToDelete:` + fmt.Sprintf("%v", this.ToDelete) + `,`,
		`ServiceId:` + fmt.Sprintf("%v", this.ServiceId) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringQueueDesc(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *QueueDescription) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQueueDesc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueueDescription: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueueDescription: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExportId", wireType)
			}
			m.ExportId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueueDesc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExportId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueueDesc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueueDesc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueueDesc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueueDesc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTs", wireType)
			}
			m.CreateTs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueueDesc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreateTs |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000008)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Disabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueueDesc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Disabled = bool(v != 0)
			hasFields[0] |= uint64(0x00000010)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToDelete", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueueDesc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ToDelete = bool(v != 0)
			hasFields[0] |= uint64(0x00000020)
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueueDesc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueueDesc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServiceId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000040)
		default:
			iNdEx = preIndex
			skippy, err := skipQueueDesc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQueueDesc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return proto.NewRequiredNotSetError("export_id")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return proto.NewRequiredNotSetError("s_type")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return proto.NewRequiredNotSetError("name")
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return proto.NewRequiredNotSetError("create_ts")
	}
	if hasFields[0]&uint64(0x00000010) == 0 {
		return proto.NewRequiredNotSetError("disabled")
	}
	if hasFields[0]&uint64(0x00000020) == 0 {
		return proto.NewRequiredNotSetError("to_delete")
	}
	if hasFields[0]&uint64(0x00000040) == 0 {
		return proto.NewRequiredNotSetError("service_id")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQueueDesc(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQueueDesc
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQueueDesc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQueueDesc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthQueueDesc
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowQueueDesc
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipQueueDesc(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthQueueDesc = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQueueDesc   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("qconf/queue_desc.proto", fileDescriptorQueueDesc) }

var fileDescriptorQueueDesc = []byte{
	// 267 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0xcf, 0x31, 0x4e, 0xc3, 0x30,
	0x14, 0x06, 0xe0, 0x38, 0x4d, 0x4b, 0xe2, 0x09, 0x79, 0x40, 0x96, 0x90, 0x1e, 0x01, 0x96, 0x0c,
	0x08, 0xee, 0x50, 0x75, 0xe9, 0x08, 0xea, 0x1e, 0x05, 0xfb, 0x21, 0x59, 0x2a, 0xb1, 0x6b, 0xbb,
	0x88, 0x6e, 0x1c, 0x81, 0x63, 0x70, 0x94, 0x8e, 0x1d, 0x99, 0x10, 0x31, 0x0b, 0x63, 0x57, 0x36,
	0x94, 0xb4, 0x91, 0xb2, 0x7e, 0xff, 0xaf, 0x5f, 0xef, 0xd1, 0xb3, 0x95, 0xd0, 0xf5, 0xd3, 0xdd,
	0x6a, 0x8d, 0x6b, 0x2c, 0x25, 0x3a, 0x71, 0x6b, 0xac, 0xf6, 0x9a, 0x8d, 0x3b, 0xbf, 0xfa, 0x23,
	0xf4, 0xf4, 0xbe, 0xcd, 0x66, 0xe8, 0x84, 0x55, 0xc6, 0x2b, 0x5d, 0xb3, 0x4b, 0x9a, 0xe1, 0xab,
	0xd1, 0xd6, 0x97, 0x4a, 0x72, 0x92, 0xc7, 0x45, 0x32, 0x4d, 0xb6, 0x5f, 0x17, 0xd1, 0x43, 0x7a,
	0xe0, 0xb9, 0x64, 0xe7, 0x74, 0xe2, 0x4a, 0xbf, 0x31, 0xc8, 0xe3, 0x3c, 0x2e, 0xb2, 0x63, 0x3e,
	0x76, 0x8b, 0x8d, 0x41, 0xc6, 0x69, 0x52, 0x57, 0xcf, 0xc8, 0x47, 0x83, 0xa8, 0x93, 0x76, 0x59,
	0x58, 0xac, 0x3c, 0x96, 0xde, 0xf1, 0x24, 0x8f, 0x8b, 0x51, 0xbf, 0x7c, 0xe0, 0x85, 0x63, 0x39,
	0x4d, 0xa5, 0x72, 0xd5, 0xe3, 0x12, 0x25, 0x1f, 0xe7, 0x71, 0x91, 0xf6, 0x8d, 0x5e, 0xdb, 0x11,
	0xaf, 0x4b, 0x89, 0x4b, 0xf4, 0xc8, 0x27, 0xc3, 0x8a, 0xd7, 0xb3, 0x4e, 0xd9, 0x35, 0xa5, 0x0e,
	0xed, 0x8b, 0x12, 0xd8, 0xbe, 0x70, 0x32, 0xb8, 0x23, 0x3b, 0xfa, 0x5c, 0x4e, 0x6f, 0x76, 0x0d,
	0x44, 0x9f, 0x0d, 0x44, 0xfb, 0x06, 0xc8, 0x5b, 0x00, 0xf2, 0x11, 0x80, 0x6c, 0x03, 0x90, 0x5d,
	0x00, 0xf2, 0x1d, 0x80, 0xfc, 0x06, 0x88, 0xf6, 0x01, 0xc8, 0xfb, 0x0f, 0x44, 0xff, 0x01, 0x00,
	0x00, 0xff, 0xff, 0xec, 0x94, 0x69, 0xbc, 0x49, 0x01, 0x00, 0x00,
}
