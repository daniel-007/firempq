// Code generated by protoc-gen-gogo.
// source: pqueue/pqmsg.proto
// DO NOT EDIT!

/*
	Package pqueue is a generated protocol buffer package.

	It is generated from these files:
		pqueue/pqmsg.proto

	It has these top-level messages:
		PQueueMsgData
*/
package pqueue

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import strings "strings"
import github_com_gogo_protobuf_proto "github.com/gogo/protobuf/proto"
import sort "sort"
import strconv "strconv"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.GoGoProtoPackageIsVersion1

type PQueueMsgData struct {
	Priority int64  `protobuf:"varint,1,opt,name=priority,proto3" json:"priority,omitempty"`
	ExpireTs int64  `protobuf:"varint,2,opt,name=expire_ts,json=expireTs,proto3" json:"expire_ts,omitempty"`
	PopCount int64  `protobuf:"varint,3,opt,name=pop_count,json=popCount,proto3" json:"pop_count,omitempty"`
	UnlockTs int64  `protobuf:"varint,4,opt,name=unlock_ts,json=unlockTs,proto3" json:"unlock_ts,omitempty"`
	StrId    string `protobuf:"bytes,5,opt,name=str_id,json=strId,proto3" json:"str_id,omitempty"`
}

func (m *PQueueMsgData) Reset()                    { *m = PQueueMsgData{} }
func (*PQueueMsgData) ProtoMessage()               {}
func (*PQueueMsgData) Descriptor() ([]byte, []int) { return fileDescriptorPqmsg, []int{0} }

func init() {
	proto.RegisterType((*PQueueMsgData)(nil), "pqueue.PQueueMsgData")
}
func (this *PQueueMsgData) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*PQueueMsgData)
	if !ok {
		that2, ok := that.(PQueueMsgData)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Priority != that1.Priority {
		return false
	}
	if this.ExpireTs != that1.ExpireTs {
		return false
	}
	if this.PopCount != that1.PopCount {
		return false
	}
	if this.UnlockTs != that1.UnlockTs {
		return false
	}
	if this.StrId != that1.StrId {
		return false
	}
	return true
}
func (this *PQueueMsgData) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&pqueue.PQueueMsgData{")
	s = append(s, "Priority: "+fmt.Sprintf("%#v", this.Priority)+",\n")
	s = append(s, "ExpireTs: "+fmt.Sprintf("%#v", this.ExpireTs)+",\n")
	s = append(s, "PopCount: "+fmt.Sprintf("%#v", this.PopCount)+",\n")
	s = append(s, "UnlockTs: "+fmt.Sprintf("%#v", this.UnlockTs)+",\n")
	s = append(s, "StrId: "+fmt.Sprintf("%#v", this.StrId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringPqmsg(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func extensionToGoStringPqmsg(e map[int32]github_com_gogo_protobuf_proto.Extension) string {
	if e == nil {
		return "nil"
	}
	s := "map[int32]proto.Extension{"
	keys := make([]int, 0, len(e))
	for k := range e {
		keys = append(keys, int(k))
	}
	sort.Ints(keys)
	ss := []string{}
	for _, k := range keys {
		ss = append(ss, strconv.Itoa(k)+": "+e[int32(k)].GoString())
	}
	s += strings.Join(ss, ",") + "}"
	return s
}
func (m *PQueueMsgData) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *PQueueMsgData) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Priority != 0 {
		data[i] = 0x8
		i++
		i = encodeVarintPqmsg(data, i, uint64(m.Priority))
	}
	if m.ExpireTs != 0 {
		data[i] = 0x10
		i++
		i = encodeVarintPqmsg(data, i, uint64(m.ExpireTs))
	}
	if m.PopCount != 0 {
		data[i] = 0x18
		i++
		i = encodeVarintPqmsg(data, i, uint64(m.PopCount))
	}
	if m.UnlockTs != 0 {
		data[i] = 0x20
		i++
		i = encodeVarintPqmsg(data, i, uint64(m.UnlockTs))
	}
	if len(m.StrId) > 0 {
		data[i] = 0x2a
		i++
		i = encodeVarintPqmsg(data, i, uint64(len(m.StrId)))
		i += copy(data[i:], m.StrId)
	}
	return i, nil
}

func encodeFixed64Pqmsg(data []byte, offset int, v uint64) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	data[offset+4] = uint8(v >> 32)
	data[offset+5] = uint8(v >> 40)
	data[offset+6] = uint8(v >> 48)
	data[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Pqmsg(data []byte, offset int, v uint32) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintPqmsg(data []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		data[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	data[offset] = uint8(v)
	return offset + 1
}
func (m *PQueueMsgData) Size() (n int) {
	var l int
	_ = l
	if m.Priority != 0 {
		n += 1 + sovPqmsg(uint64(m.Priority))
	}
	if m.ExpireTs != 0 {
		n += 1 + sovPqmsg(uint64(m.ExpireTs))
	}
	if m.PopCount != 0 {
		n += 1 + sovPqmsg(uint64(m.PopCount))
	}
	if m.UnlockTs != 0 {
		n += 1 + sovPqmsg(uint64(m.UnlockTs))
	}
	l = len(m.StrId)
	if l > 0 {
		n += 1 + l + sovPqmsg(uint64(l))
	}
	return n
}

func sovPqmsg(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozPqmsg(x uint64) (n int) {
	return sovPqmsg(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *PQueueMsgData) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PQueueMsgData{`,
		`Priority:` + fmt.Sprintf("%v", this.Priority) + `,`,
		`ExpireTs:` + fmt.Sprintf("%v", this.ExpireTs) + `,`,
		`PopCount:` + fmt.Sprintf("%v", this.PopCount) + `,`,
		`UnlockTs:` + fmt.Sprintf("%v", this.UnlockTs) + `,`,
		`StrId:` + fmt.Sprintf("%v", this.StrId) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringPqmsg(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *PQueueMsgData) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPqmsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PQueueMsgData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PQueueMsgData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Priority", wireType)
			}
			m.Priority = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPqmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Priority |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpireTs", wireType)
			}
			m.ExpireTs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPqmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.ExpireTs |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PopCount", wireType)
			}
			m.PopCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPqmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.PopCount |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnlockTs", wireType)
			}
			m.UnlockTs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPqmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.UnlockTs |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StrId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPqmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPqmsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StrId = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPqmsg(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPqmsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPqmsg(data []byte) (n int, err error) {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPqmsg
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPqmsg
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if data[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPqmsg
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthPqmsg
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowPqmsg
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipPqmsg(data[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthPqmsg = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPqmsg   = fmt.Errorf("proto: integer overflow")
)

var fileDescriptorPqmsg = []byte{
	// 204 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0x12, 0x2a, 0x28, 0x2c, 0x4d,
	0x2d, 0x4d, 0xd5, 0x2f, 0x28, 0xcc, 0x2d, 0x4e, 0xd7, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62,
	0x83, 0x88, 0x29, 0xcd, 0x64, 0xe4, 0xe2, 0x0d, 0x08, 0x04, 0x31, 0x7d, 0x8b, 0xd3, 0x5d, 0x12,
	0x4b, 0x12, 0x85, 0xa4, 0xb8, 0x38, 0x0a, 0x8a, 0x32, 0xf3, 0x8b, 0x32, 0x4b, 0x2a, 0x25, 0x18,
	0x15, 0x18, 0x35, 0x98, 0x83, 0xe0, 0x7c, 0x21, 0x69, 0x2e, 0xce, 0xd4, 0x8a, 0x82, 0xcc, 0xa2,
	0xd4, 0xf8, 0x92, 0x62, 0x09, 0x26, 0x88, 0x24, 0x44, 0x20, 0xa4, 0x18, 0x24, 0x59, 0x90, 0x5f,
	0x10, 0x9f, 0x9c, 0x5f, 0x9a, 0x57, 0x22, 0xc1, 0x0c, 0xd5, 0x99, 0x5f, 0xe0, 0x0c, 0xe2, 0x83,
	0x24, 0x4b, 0xf3, 0x72, 0xf2, 0x93, 0xb3, 0x41, 0x3a, 0x59, 0x20, 0x92, 0x10, 0x01, 0xa0, 0x4e,
	0x51, 0x2e, 0xb6, 0xe2, 0x92, 0xa2, 0xf8, 0xcc, 0x14, 0x09, 0x56, 0xa0, 0x0c, 0x67, 0x10, 0x2b,
	0x90, 0xe7, 0x99, 0xe2, 0xa4, 0x73, 0xe1, 0xa1, 0x1c, 0xc3, 0x0d, 0x20, 0xfe, 0xf0, 0x50, 0x8e,
	0xb1, 0xe1, 0x91, 0x1c, 0xe3, 0x0a, 0x20, 0x3e, 0x01, 0xc4, 0x17, 0x80, 0xf8, 0x01, 0x10, 0xbf,
	0x78, 0x04, 0x94, 0x03, 0xd2, 0x13, 0x1e, 0xcb, 0x31, 0x24, 0xb1, 0x81, 0x3d, 0x66, 0x0c, 0x08,
	0x00, 0x00, 0xff, 0xff, 0x81, 0x3b, 0x71, 0x4f, 0xee, 0x00, 0x00, 0x00,
}
