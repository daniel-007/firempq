// Code generated by protoc-gen-gogo.
// source: pmsg/msg.proto
// DO NOT EDIT!

/*
	Package pmsg is a generated protocol buffer package.

	It is generated from these files:
		pmsg/msg.proto

	It has these top-level messages:
		PMsgMeta
		DiskData
*/
package pmsg

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import strconv "strconv"

import strings "strings"
import github_com_gogo_protobuf_proto "github.com/gogo/protobuf/proto"
import sort "sort"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.GoGoProtoPackageIsVersion1

type DiskData_Action int32

const (
	New    DiskData_Action = 0
	Update DiskData_Action = 1
	Delete DiskData_Action = 2
)

var DiskData_Action_name = map[int32]string{
	0: "New",
	1: "Update",
	2: "Delete",
}
var DiskData_Action_value = map[string]int32{
	"New":    0,
	"Update": 1,
	"Delete": 2,
}

func (DiskData_Action) EnumDescriptor() ([]byte, []int) { return fileDescriptorMsg, []int{1, 0} }

type PMsgMeta struct {
	Priority      int64  `protobuf:"varint,1,opt,name=priority,proto3" json:"priority,omitempty"`
	ExpireTs      int64  `protobuf:"varint,2,opt,name=expire_ts,json=expireTs,proto3" json:"expire_ts,omitempty"`
	PopCount      int64  `protobuf:"varint,3,opt,name=pop_count,json=popCount,proto3" json:"pop_count,omitempty"`
	UnlockTs      int64  `protobuf:"varint,4,opt,name=unlock_ts,json=unlockTs,proto3" json:"unlock_ts,omitempty"`
	StrId         string `protobuf:"bytes,5,opt,name=str_id,json=strId,proto3" json:"str_id,omitempty"`
	Serial        uint64 `protobuf:"varint,6,opt,name=serial,proto3" json:"serial,omitempty"`
	PayloadOffset uint64 `protobuf:"varint,7,opt,name=payload_offset,json=payloadOffset,proto3" json:"payload_offset,omitempty"`
	PayloadBlock  uint64 `protobuf:"varint,8,opt,name=payload_block,json=payloadBlock,proto3" json:"payload_block,omitempty"`
}

func (m *PMsgMeta) Reset()                    { *m = PMsgMeta{} }
func (*PMsgMeta) ProtoMessage()               {}
func (*PMsgMeta) Descriptor() ([]byte, []int) { return fileDescriptorMsg, []int{0} }

type DiskData struct {
	Action DiskData_Action `protobuf:"varint,1,opt,name=action,proto3,enum=pmsg.DiskData_Action" json:"action,omitempty"`
	Meta   *PMsgMeta       `protobuf:"bytes,3,opt,name=meta" json:"meta,omitempty"`
}

func (m *DiskData) Reset()                    { *m = DiskData{} }
func (*DiskData) ProtoMessage()               {}
func (*DiskData) Descriptor() ([]byte, []int) { return fileDescriptorMsg, []int{1} }

func (m *DiskData) GetMeta() *PMsgMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func init() {
	proto.RegisterType((*PMsgMeta)(nil), "pmsg.PMsgMeta")
	proto.RegisterType((*DiskData)(nil), "pmsg.DiskData")
	proto.RegisterEnum("pmsg.DiskData_Action", DiskData_Action_name, DiskData_Action_value)
}
func (x DiskData_Action) String() string {
	s, ok := DiskData_Action_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *PMsgMeta) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*PMsgMeta)
	if !ok {
		that2, ok := that.(PMsgMeta)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Priority != that1.Priority {
		return false
	}
	if this.ExpireTs != that1.ExpireTs {
		return false
	}
	if this.PopCount != that1.PopCount {
		return false
	}
	if this.UnlockTs != that1.UnlockTs {
		return false
	}
	if this.StrId != that1.StrId {
		return false
	}
	if this.Serial != that1.Serial {
		return false
	}
	if this.PayloadOffset != that1.PayloadOffset {
		return false
	}
	if this.PayloadBlock != that1.PayloadBlock {
		return false
	}
	return true
}
func (this *DiskData) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*DiskData)
	if !ok {
		that2, ok := that.(DiskData)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Action != that1.Action {
		return false
	}
	if !this.Meta.Equal(that1.Meta) {
		return false
	}
	return true
}
func (this *PMsgMeta) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 12)
	s = append(s, "&pmsg.PMsgMeta{")
	s = append(s, "Priority: "+fmt.Sprintf("%#v", this.Priority)+",\n")
	s = append(s, "ExpireTs: "+fmt.Sprintf("%#v", this.ExpireTs)+",\n")
	s = append(s, "PopCount: "+fmt.Sprintf("%#v", this.PopCount)+",\n")
	s = append(s, "UnlockTs: "+fmt.Sprintf("%#v", this.UnlockTs)+",\n")
	s = append(s, "StrId: "+fmt.Sprintf("%#v", this.StrId)+",\n")
	s = append(s, "Serial: "+fmt.Sprintf("%#v", this.Serial)+",\n")
	s = append(s, "PayloadOffset: "+fmt.Sprintf("%#v", this.PayloadOffset)+",\n")
	s = append(s, "PayloadBlock: "+fmt.Sprintf("%#v", this.PayloadBlock)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DiskData) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pmsg.DiskData{")
	s = append(s, "Action: "+fmt.Sprintf("%#v", this.Action)+",\n")
	if this.Meta != nil {
		s = append(s, "Meta: "+fmt.Sprintf("%#v", this.Meta)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringMsg(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func extensionToGoStringMsg(e map[int32]github_com_gogo_protobuf_proto.Extension) string {
	if e == nil {
		return "nil"
	}
	s := "map[int32]proto.Extension{"
	keys := make([]int, 0, len(e))
	for k := range e {
		keys = append(keys, int(k))
	}
	sort.Ints(keys)
	ss := []string{}
	for _, k := range keys {
		ss = append(ss, strconv.Itoa(k)+": "+e[int32(k)].GoString())
	}
	s += strings.Join(ss, ",") + "}"
	return s
}
func (m *PMsgMeta) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *PMsgMeta) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Priority != 0 {
		data[i] = 0x8
		i++
		i = encodeVarintMsg(data, i, uint64(m.Priority))
	}
	if m.ExpireTs != 0 {
		data[i] = 0x10
		i++
		i = encodeVarintMsg(data, i, uint64(m.ExpireTs))
	}
	if m.PopCount != 0 {
		data[i] = 0x18
		i++
		i = encodeVarintMsg(data, i, uint64(m.PopCount))
	}
	if m.UnlockTs != 0 {
		data[i] = 0x20
		i++
		i = encodeVarintMsg(data, i, uint64(m.UnlockTs))
	}
	if len(m.StrId) > 0 {
		data[i] = 0x2a
		i++
		i = encodeVarintMsg(data, i, uint64(len(m.StrId)))
		i += copy(data[i:], m.StrId)
	}
	if m.Serial != 0 {
		data[i] = 0x30
		i++
		i = encodeVarintMsg(data, i, uint64(m.Serial))
	}
	if m.PayloadOffset != 0 {
		data[i] = 0x38
		i++
		i = encodeVarintMsg(data, i, uint64(m.PayloadOffset))
	}
	if m.PayloadBlock != 0 {
		data[i] = 0x40
		i++
		i = encodeVarintMsg(data, i, uint64(m.PayloadBlock))
	}
	return i, nil
}

func (m *DiskData) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *DiskData) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Action != 0 {
		data[i] = 0x8
		i++
		i = encodeVarintMsg(data, i, uint64(m.Action))
	}
	if m.Meta != nil {
		data[i] = 0x1a
		i++
		i = encodeVarintMsg(data, i, uint64(m.Meta.Size()))
		n1, err := m.Meta.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func encodeFixed64Msg(data []byte, offset int, v uint64) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	data[offset+4] = uint8(v >> 32)
	data[offset+5] = uint8(v >> 40)
	data[offset+6] = uint8(v >> 48)
	data[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Msg(data []byte, offset int, v uint32) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintMsg(data []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		data[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	data[offset] = uint8(v)
	return offset + 1
}
func (m *PMsgMeta) Size() (n int) {
	var l int
	_ = l
	if m.Priority != 0 {
		n += 1 + sovMsg(uint64(m.Priority))
	}
	if m.ExpireTs != 0 {
		n += 1 + sovMsg(uint64(m.ExpireTs))
	}
	if m.PopCount != 0 {
		n += 1 + sovMsg(uint64(m.PopCount))
	}
	if m.UnlockTs != 0 {
		n += 1 + sovMsg(uint64(m.UnlockTs))
	}
	l = len(m.StrId)
	if l > 0 {
		n += 1 + l + sovMsg(uint64(l))
	}
	if m.Serial != 0 {
		n += 1 + sovMsg(uint64(m.Serial))
	}
	if m.PayloadOffset != 0 {
		n += 1 + sovMsg(uint64(m.PayloadOffset))
	}
	if m.PayloadBlock != 0 {
		n += 1 + sovMsg(uint64(m.PayloadBlock))
	}
	return n
}

func (m *DiskData) Size() (n int) {
	var l int
	_ = l
	if m.Action != 0 {
		n += 1 + sovMsg(uint64(m.Action))
	}
	if m.Meta != nil {
		l = m.Meta.Size()
		n += 1 + l + sovMsg(uint64(l))
	}
	return n
}

func sovMsg(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozMsg(x uint64) (n int) {
	return sovMsg(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *PMsgMeta) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PMsgMeta{`,
		`Priority:` + fmt.Sprintf("%v", this.Priority) + `,`,
		`ExpireTs:` + fmt.Sprintf("%v", this.ExpireTs) + `,`,
		`PopCount:` + fmt.Sprintf("%v", this.PopCount) + `,`,
		`UnlockTs:` + fmt.Sprintf("%v", this.UnlockTs) + `,`,
		`StrId:` + fmt.Sprintf("%v", this.StrId) + `,`,
		`Serial:` + fmt.Sprintf("%v", this.Serial) + `,`,
		`PayloadOffset:` + fmt.Sprintf("%v", this.PayloadOffset) + `,`,
		`PayloadBlock:` + fmt.Sprintf("%v", this.PayloadBlock) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DiskData) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DiskData{`,
		`Action:` + fmt.Sprintf("%v", this.Action) + `,`,
		`Meta:` + strings.Replace(fmt.Sprintf("%v", this.Meta), "PMsgMeta", "PMsgMeta", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringMsg(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *PMsgMeta) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PMsgMeta: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PMsgMeta: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Priority", wireType)
			}
			m.Priority = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Priority |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpireTs", wireType)
			}
			m.ExpireTs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.ExpireTs |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PopCount", wireType)
			}
			m.PopCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.PopCount |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnlockTs", wireType)
			}
			m.UnlockTs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.UnlockTs |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StrId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StrId = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Serial", wireType)
			}
			m.Serial = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Serial |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PayloadOffset", wireType)
			}
			m.PayloadOffset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.PayloadOffset |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PayloadBlock", wireType)
			}
			m.PayloadBlock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.PayloadBlock |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMsg(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DiskData) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DiskData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DiskData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Action", wireType)
			}
			m.Action = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Action |= (DiskData_Action(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Meta == nil {
				m.Meta = &PMsgMeta{}
			}
			if err := m.Meta.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsg(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMsg(data []byte) (n int, err error) {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if data[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthMsg
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowMsg
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipMsg(data[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthMsg = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMsg   = fmt.Errorf("proto: integer overflow")
)

var fileDescriptorMsg = []byte{
	// 345 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x3c, 0x91, 0xb1, 0x4f, 0xc2, 0x40,
	0x14, 0xc6, 0x29, 0x94, 0x02, 0xa7, 0x12, 0x72, 0x09, 0xe6, 0xa2, 0x49, 0x63, 0x6a, 0x4c, 0x34,
	0xd1, 0x9a, 0xe0, 0x5f, 0x20, 0xb2, 0x38, 0xa0, 0xa6, 0xd1, 0xb9, 0x39, 0xe8, 0x41, 0x2e, 0x14,
	0xee, 0xd2, 0x3b, 0xa2, 0x6c, 0x8e, 0x8e, 0xfe, 0x19, 0xfe, 0x29, 0x8e, 0x8c, 0x8e, 0x82, 0x8b,
	0xa3, 0xa3, 0xa3, 0xef, 0xae, 0xc5, 0xe1, 0x0b, 0xf7, 0x7d, 0xbf, 0xf7, 0x42, 0xbe, 0x57, 0xd4,
	0x94, 0x53, 0x35, 0x3e, 0x07, 0x85, 0x32, 0x13, 0x5a, 0x60, 0xd7, 0xf8, 0xe0, 0xd7, 0x41, 0xf5,
	0xbb, 0xbe, 0x1a, 0xf7, 0x99, 0xa6, 0x78, 0x0f, 0xd5, 0x65, 0xc6, 0x45, 0xc6, 0xf5, 0x82, 0x38,
	0x07, 0xce, 0x71, 0x25, 0xfa, 0xf7, 0x78, 0x1f, 0x35, 0xd8, 0x93, 0xe4, 0x19, 0x8b, 0xb5, 0x22,
	0xe5, 0x1c, 0xe6, 0xc1, 0xbd, 0x32, 0x50, 0x0a, 0x19, 0x0f, 0xc5, 0x7c, 0xa6, 0x49, 0xa5, 0xd8,
	0x14, 0xf2, 0xca, 0x78, 0x03, 0xe7, 0xb3, 0x54, 0x0c, 0x27, 0x66, 0xd3, 0xcd, 0x61, 0x1e, 0xc0,
	0x66, 0x1b, 0x79, 0x4a, 0x67, 0x31, 0x4f, 0x48, 0x15, 0x48, 0x23, 0xaa, 0x82, 0xbb, 0x4e, 0xf0,
	0x2e, 0xc4, 0x2c, 0xe3, 0x34, 0x25, 0x1e, 0xc4, 0x6e, 0x54, 0x38, 0x7c, 0x04, 0x35, 0xe8, 0x22,
	0x15, 0x34, 0x89, 0xc5, 0x68, 0xa4, 0x98, 0x26, 0x35, 0xcb, 0x77, 0x8a, 0xf4, 0xd6, 0x86, 0xf8,
	0x10, 0x6d, 0x82, 0x78, 0x60, 0xfe, 0x88, 0xd4, 0xed, 0xd4, 0x76, 0x11, 0x76, 0x4d, 0x16, 0xbc,
	0x40, 0xf5, 0x1e, 0x57, 0x93, 0x1e, 0x85, 0xea, 0x67, 0xc8, 0xa3, 0x43, 0xcd, 0xc5, 0xcc, 0x16,
	0x6f, 0x76, 0xda, 0xa1, 0x39, 0x4f, 0xb8, 0xe1, 0xe1, 0xa5, 0x85, 0x51, 0x31, 0x84, 0x03, 0xe4,
	0x4e, 0xe1, 0x62, 0xb6, 0xeb, 0x56, 0xa7, 0x99, 0x0f, 0x6f, 0xee, 0x18, 0x59, 0x16, 0x9c, 0x20,
	0x2f, 0xdf, 0xc2, 0x35, 0x54, 0xb9, 0x61, 0x8f, 0xad, 0x12, 0x46, 0xc8, 0x7b, 0x90, 0x09, 0xd5,
	0xac, 0xe5, 0x98, 0x77, 0x8f, 0xa5, 0x0c, 0xde, 0xe5, 0xee, 0xe9, 0x72, 0xe5, 0x97, 0x3e, 0x40,
	0x3f, 0x2b, 0xdf, 0x79, 0x5e, 0xfb, 0xce, 0x1b, 0xe8, 0x1d, 0xb4, 0x04, 0x7d, 0x82, 0xbe, 0xd7,
	0xc0, 0xe0, 0xf7, 0xf5, 0xcb, 0x2f, 0x0d, 0x3c, 0xfb, 0x01, 0x2f, 0xfe, 0x02, 0x00, 0x00, 0xff,
	0xff, 0x70, 0x3b, 0x1c, 0xdb, 0xd2, 0x01, 0x00, 0x00,
}
