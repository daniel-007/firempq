// Code generated by protoc-gen-go.
// source: google.golang.org/genproto/googleapis/type/timeofday.proto
// DO NOT EDIT!

package google_type

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Represents a time of day. The date and time zone are either not significant
// or are specified elsewhere. An API may chose to allow leap seconds. Related
// types are [google.type.Date][google.type.Date] and `google.protobuf.Timestamp`.
type TimeOfDay struct {
	// Hours of day in 24 hour format. Should be from 0 to 23. An API may choose
	// to allow the value "24:00:00" for scenarios like business closing time.
	Hours int32 `protobuf:"varint,1,opt,name=hours" json:"hours,omitempty"`
	// Minutes of hour of day. Must be from 0 to 59.
	Minutes int32 `protobuf:"varint,2,opt,name=minutes" json:"minutes,omitempty"`
	// Seconds of minutes of the time. Must normally be from 0 to 59. An API may
	// allow the value 60 if it allows leap-seconds.
	Seconds int32 `protobuf:"varint,3,opt,name=seconds" json:"seconds,omitempty"`
	// Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999.
	Nanos int32 `protobuf:"varint,4,opt,name=nanos" json:"nanos,omitempty"`
}

func (m *TimeOfDay) Reset()                    { *m = TimeOfDay{} }
func (m *TimeOfDay) String() string            { return proto.CompactTextString(m) }
func (*TimeOfDay) ProtoMessage()               {}
func (*TimeOfDay) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{0} }

func init() {
	proto.RegisterType((*TimeOfDay)(nil), "google.type.TimeOfDay")
}

func init() {
	proto.RegisterFile("google.golang.org/genproto/googleapis/type/timeofday.proto", fileDescriptor5)
}

var fileDescriptor5 = []byte{
	// 190 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x4c, 0x8e, 0xb1, 0x0a, 0xc2, 0x30,
	0x14, 0x45, 0x49, 0x6b, 0x15, 0x23, 0x28, 0x14, 0x87, 0x8c, 0xe2, 0xe4, 0x20, 0xc9, 0xe0, 0xe6,
	0x58, 0x04, 0x47, 0x8b, 0xf4, 0x07, 0x62, 0x9b, 0xc6, 0x62, 0x9b, 0x57, 0x9a, 0x74, 0xe8, 0xdf,
	0x88, 0x5f, 0xaa, 0x49, 0xaa, 0x38, 0x9e, 0x77, 0x78, 0xf7, 0x5e, 0x7c, 0x94, 0x00, 0xb2, 0x16,
	0x54, 0x42, 0xcd, 0x95, 0xa4, 0xd0, 0x49, 0x26, 0x85, 0x6a, 0x3b, 0x30, 0xc0, 0xbc, 0xe2, 0x6d,
	0xa5, 0x99, 0x19, 0x5a, 0xc1, 0x4c, 0xd5, 0x08, 0x28, 0x0b, 0x3e, 0x50, 0xe7, 0xe3, 0xc5, 0xf8,
	0x6b, 0xe5, 0xf6, 0x81, 0xe7, 0xd9, 0xc7, 0x5f, 0xca, 0x13, 0x1f, 0xe2, 0x35, 0x8e, 0xee, 0xd0,
	0x77, 0x9a, 0xa0, 0x0d, 0xda, 0x45, 0x57, 0x0f, 0x31, 0xc1, 0xb3, 0xa6, 0x52, 0xbd, 0x11, 0x9a,
	0x04, 0xee, 0xfe, 0x45, 0x6b, 0xb4, 0xc8, 0x41, 0x15, 0x9a, 0x84, 0xde, 0x8c, 0x68, 0x93, 0x14,
	0x57, 0xa0, 0xc9, 0xc4, 0x27, 0x39, 0x48, 0xf6, 0x78, 0x95, 0x43, 0x43, 0xff, 0xfa, 0x93, 0xe5,
	0xaf, 0x3d, 0xb5, 0xe3, 0x52, 0xf4, 0x44, 0xe8, 0x15, 0x84, 0xe7, 0x2c, 0xbd, 0x4d, 0xdd, 0xdc,
	0xc3, 0x3b, 0x00, 0x00, 0xff, 0xff, 0xb2, 0x8e, 0xed, 0x0f, 0xec, 0x00, 0x00, 0x00,
}
